- defaults:
    name: global
    email-recipients: $DEFAULT_RECIPIENTS
    cluster: ''

- project:
    name: autonag
    description-intro: Builds, tests, & deploys the autonag docker image.
    email-recipients: spencer.oberstadt@cru.org
    jobs:
      - 'rails-template'

- project:
    name: cap
    description-intro: Builds, tests, & deploys the combined application (apply.cru.org) docker image.
    email-recipients: andrewroth@gmail.com
    jobs:
      - 'rails-template'

- project:
    name: cruprojects
    description-intro: Builds, tests, & deploys the cruprojects.com docker image.
    email-recipients: spencer.oberstadt@cru.org
    jobs:
      - 'rails-template'

- project:
    name: global-profile-php
    description-intro: Builds, tests, & deploys the global-profile-php docker image.
    email-recipients: brian.zoetewey@ccci.org
    jobs:
      - 'php-template'

- project:
    name: global_registry
    description-intro: Builds, tests, & deploys the Global Registry docker image.
    jobs:
      - 'rails-template'

- project:
    name: gma-app-php
    description-intro: Builds, tests, & deploys the gma-app-php docker image.
    email-recipients: brian.zoetewey@ccci.org
    jobs:
      - 'php-template'

- project:
    name: infobase
    description-intro: Builds, tests, & deploys the Infobase docker image.
    email-recipients: josh.starcher@cru.org, justin.sabelko@cru.org
    jobs:
      - 'rails-template'

- project:
    name: maintenance
    description-intro: Builds, tests, & deploys the maintenance management docker image.
    email-recipients: josh.starcher@cru.org
    jobs:
      - 'rails-template'

- project:
    name: ministry_view_api
    description-intro: Builds, tests, & deploys the MinistryView API docker image.
    email-recipients: brian.zoetewey@ccci.org
    jobs:
      - 'rails-template'

- project:
    name: missionhub
    description-intro: Builds, tests, & deploys the MissionHub docker image.
    email-recipients: josh.starcher@cru.org
    jobs:
      - 'rails-template'

- project:
    name: mpd-dashboard-api
    description-intro: Builds, tests, & deploys the mpd-dashboard-api docker image.
    email-recipients: josh.starcher@cru.org, brian.zoetewey@ccci.org, adam.meyer@cru.org
    jobs:
      - 'rails-template'

- project:
    name: mpd-dashboard-app
    description-intro: Builds, tests, & deploys the mpd-dashboard-app docker image.
    email-recipients: brian.zoetewey@ccci.org
    jobs:
      - 'php-template'

- project:
    name: mpd_tool
    description-intro: Builds, tests, & deploys the mpd tool docker image.
    email-recipients: josh.starcher@cru.org, justin.sabelko@cru.org
    jobs:
      - 'rails-template'

- project:
    name: mpdx
    description-intro: Builds, tests, & deploys the MPDX docker image.
    email-recipients: josh.starcher@cru.org, dave.raffensperger@cru.org, spencer.oberstadt@cru.org
    jobs:
      - 'rails-template'

- project:
    name: ministry_locator
    description-intro: Builds, tests, & deploys the ministry locator docker image.
    email-recipients: josh.starcher@cru.org, spencer.oberstadt@cru.org
    jobs:
      - 'rails-template'

- project:
    name: ministry_mapper
    description-intro: Builds, tests, & deploys the ministry mapper docker image.
    email-recipients: josh.starcher@cru.org
    jobs:
      - 'rails-template'

- project:
    name: oauth_server
    description-intro: Builds, tests, & deploys the oauth_server docker image.
    email-recipients: josh.starcher@cru.org
    jobs:
      - 'rails-template'

- project:
    name: pr
    description-intro: Builds, tests, & deploys the Panorama docker image.
    email-recipients: josh.starcher@cru.org, justin.sabelko@cru.org
    jobs:
      - 'rails-template'

- project:
    name: rails-cas-auth-api
    description-intro: Builds, tests, & deploys the Rails CAS Authenticated API docker image.
    email-recipients: brian.zoetewey@ccci.org, josh.starcher@cru.org
    jobs:
      - 'rails-template'

- project:
    name: rails-infrastructure-canary
    description-intro: Builds a simplistic rails app, which only serves to prove out the ci & deployment infrastructure.
    cluster: lab
    jobs:
      - 'rails-template'

- project:
    name: rideshare
    description-intro: Builds, tests, & deploys the rideshare docker image.
    jobs:
      - 'rails-template'

- project:
    name: summer_missions
    description-intro: Builds, tests, & deploys the Summer Missions docker image.
    email-recipients: josh.starcher@cru.org, justin.sabelko@cru.org, mark.knutsen@cru.org
    jobs:
      - 'rails-template'

- project:
    name: voke_api
    description-intro: Builds, tests, & deploys the Voke API docker image.
    jobs:
      - 'rails-template'

- project:
    name: watchthinkchat
    description-intro: Builds, tests, & deploys the WatchThinkChat docker image.
    jobs:
      - 'rails-template'

- project:
    name: escomm
    description-intro: Builds, tests, & deploys the Personalized EveryStudent Series docker image
    email-recipients: asaph.yuan@cru.org, david.raffensperger@cru.org
    jobs:
      - 'rails-template'


- project:
    name: voke_admin
    description-intro: Builds, tests, & deploys the Voke admin docker image.
    jobs:
      - 'react-template'

- project:
    name: redirector
    description-intro: Builds, tests, & deploys the redirector docker image.
    email-recipients: josh.starcher@cru.org
    jobs:
      - 'openresty-template'


- job-group:
    name: 'php-template'
    jobs:
        - '{name}':
            build-script: php_deploy.sh

- job-group:
    name: 'openresty-template'
    jobs:
        - '{name}':
            build-script: openresty_deploy.sh

- job-group:
    name: 'rails-template'
    jobs:
        - '{name}':
            build-script: rails_deploy.sh

- job-group:
    name: 'react-template'
    jobs:
        - '{name}':
            build-script: react_deploy.sh



- job-template:
    name: '{name}'
    description: |
      {description-intro}

      Builds on the 'staging' branch automatically trigger a deployment
      of that image to the staging environment.

      From 7am to 1pm on weekdays, builds on the 'master' branch automatically trigger a
      deployment of that image to the production environment.

      Only the master and staging branches are automatically built.
      Other branches may be manually built via `Build with Parameters`.

      Historic builds can be manually deployed to either staging or production,
      by running the 'Deploy to Production' or the 'Deploy to Staging' build promotions.
      (This won't work for builds that were not pushed to dockerhub --
      currently, only staging/master images get pushed to dockerhub).

    parameters:
      - git:
          name: BRANCH_SPECIFIER
          description: |
            If specified, jenkins will use this git branch to build.
            If not, jenkins will pick a branch (between 'master' and 'staging')
            that seems most likely to be the one you want built.
            This is usually either the branch that has commits in it that jenkins hasn't 'seen' yet,
            or, if there are none of those, the most recently-built branch.
          type: branch
          sort: none
          default: :origin/(master|staging)

    properties:
      - github:
          url: https://github.com/CruGlobal/{name}/
      - promoted-build:
            names:
              - Deploy to Staging
              - Deploy to Production
    scm:
      - git:
          branches:
          - $BRANCH_SPECIFIER
          url: git@github.com:CruGlobal/{name}.git
          wipe-workspace: false
          skip-tag: true
          prune: true
    triggers:
      - github

    builders:
      - shell: 'PROJECT_NAME=$JOB_NAME DEPLOY_ECS=false ~/bin/{build-script}'

    publishers:
      - conditional-publisher:
          - condition-kind: strings-match
            condition-string1: "$GIT_BRANCH"
            condition-string2: "origin/staging"
            action:
              - trigger-parameterized-builds:
                  - project: deploy-ecs
                    predefined-parameters: |
                      IMAGE_TAG=$GIT_COMMIT-$BUILD_NUMBER
                      PROJECT_NAME=$JOB_NAME
                      GIT_COMMIT=$GIT_COMMIT
                      GIT_BRANCH=$GIT_BRANCH
                      ENVIRONMENT=staging
                      CLUSTER={cluster}
                    condition: SUCCESS
          - condition-kind: and
            condition-operands:
              - &is-master
                condition-kind: strings-match
                condition-string1: "$GIT_BRANCH"
                condition-string2: "origin/master"
              - &is-weekday
                condition-kind: day-of-week
                day-selector: weekday
              - &is-within-work-hours
                condition-kind: time
                earliest-hour: "7"
                earliest-min: "0"
                latest-hour: "13"
                latest-min: "0"
            action:
              - trigger-parameterized-builds:
                  - project: deploy-ecs
                    predefined-parameters: |
                      IMAGE_TAG=$GIT_COMMIT-$BUILD_NUMBER
                      PROJECT_NAME=$JOB_NAME
                      GIT_COMMIT=$GIT_COMMIT
                      GIT_BRANCH=$GIT_BRANCH
                      ENVIRONMENT=production
                      CLUSTER={cluster}
                    condition: SUCCESS
          - condition-kind: and
            condition-operands:
              - <<: *is-master
              - condition-kind: not
                condition-operand:
                  condition-kind: and
                  condition-operands:
                    - <<: *is-weekday
                    - <<: *is-within-work-hours
            action:
              - email-ext:
                  recipients: '{email-recipients}'
                  failure: false
                  success: true
                  send-to:
                    -  recipients
                    -  requester
                    -  developers
                  body: |
                    Note: $JOB_NAME #$BUILD_NUMBER was built, but was not automatically deployed to production since it is now after-hours.
                    To manually deploy, run the 'Deploy to Production' promotion here:
                    ${{BUILD_URL}}promotion/

                    $DEFAULT_CONTENT
                  presend-script: $DEFAULT_PRESEND_SCRIPT

    wrappers:
      - build-name:
          name: '$GIT_BRANCH #$BUILD_NUMBER'
