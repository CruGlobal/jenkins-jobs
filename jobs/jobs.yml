- defaults:
    name: global
    email-recipients: $DEFAULT_RECIPIENTS
    cluster: ''

- project:
    name: autonag
    description-intro: Builds, tests, & deploys the autonag docker image.
    email-recipients: spencer.oberstadt@cru.org
    jobs:
      - 'rails-template'

- project:
    name: cap
    description-intro: Builds, tests, & deploys the combined application (apply.cru.org) docker image.
    email-recipients: andrewroth@gmail.com
    jobs:
      - 'rails-template'

- project:
    name: cruprojects
    description-intro: Builds, tests, & deploys the cruprojects.com docker image.
    email-recipients: spencer.oberstadt@cru.org
    jobs:
      - 'rails-template'

- project:
    name: global-profile-api
    description-intro: Builds, tests, & deploys the global-profile-api docker image.
    email-recipients: brian.zoetewey@ccci.org
    jobs:
      - 'rails-template'

- project:
    name: global360
    description-intro: Builds, tests, & deploys the global360 docker image.
    email-recipients: josh.starcher@cru.org
    jobs:
      - 'rails-template'

- project:
    name: global-profile-php
    description-intro: Builds, tests, & deploys the global-profile-php docker image.
    email-recipients: brian.zoetewey@ccci.org
    jobs:
      - 'php-template'

- project:
    name: global_registry
    description-intro: Builds, tests, & deploys the Global Registry docker image.
    jobs:
      - 'rails-template'

- project:
    name: gma-app-php
    description-intro: Builds, tests, & deploys the gma-app-php docker image.
    email-recipients: brian.zoetewey@ccci.org
    jobs:
      - 'php-template'

- project:
    name: infobase
    description-intro: Builds, tests, & deploys the Infobase docker image.
    email-recipients: josh.starcher@cru.org, justin.sabelko@cru.org
    jobs:
      - 'rails-template'

- project:
    name: maintenance
    description-intro: Builds, tests, & deploys the maintenance management docker image.
    email-recipients: josh.starcher@cru.org
    jobs:
      - 'rails-template'

- project:
    name: measurements-api
    description-intro: Builds, tests, & deploys the Measurements API docker image.
    email-recipients: brian.zoetewey@ccci.org, spencer.oberstadt@cru.org
    jobs:
      - 'rails-template'

- project:
    name: ministry_view_api
    description-intro: Builds, tests, & deploys the MinistryView API docker image.
    email-recipients: brian.zoetewey@ccci.org
    jobs:
      - 'rails-template'

- project:
    name: missionhub
    description-intro: Builds, tests, & deploys the MissionHub docker image.
    email-recipients: josh.starcher@cru.org
    jobs:
      - 'rails-template'

- project:
    name: missionhub-api
    description-intro: Builds, tests, & deploys the MissionHub API docker image.
    jobs:
      - 'rails-template'

- project:
    name: pact_hr
    description-intro: Builds, tests, & deploys the Pact HR docker image.
    email-recipients: josh.starcher@cru.org
    jobs:
      - 'rails-template'

- project:
    name: mpd-dashboard-api
    description-intro: Builds, tests, & deploys the mpd-dashboard-api docker image.
    email-recipients: josh.starcher@cru.org, brian.zoetewey@ccci.org, adam.meyer@cru.org
    jobs:
      - 'rails-template'

- project:
    name: mpd-dashboard-app
    description-intro: Builds, tests, & deploys the mpd-dashboard-app docker image.
    email-recipients: brian.zoetewey@ccci.org
    jobs:
      - 'php-template'

- project:
    name: mpd_tool
    description-intro: Builds, tests, & deploys the mpd tool docker image.
    email-recipients: josh.starcher@cru.org, justin.sabelko@cru.org
    jobs:
      - 'rails-template'

- project:
    name: mpdx
    description-intro: Builds, tests, & deploys the MPDX docker image.
    email-recipients: josh.starcher@cru.org, dave.raffensperger@cru.org, spencer.oberstadt@cru.org
    jobs:
      - 'rails-template'

- project:
    name: ministry_locator
    description-intro: Builds, tests, & deploys the ministry locator docker image.
    email-recipients: josh.starcher@cru.org, spencer.oberstadt@cru.org
    jobs:
      - 'rails-template'

- project:
    name: ministry_mapper
    description-intro: Builds, tests, & deploys the ministry mapper docker image.
    email-recipients: josh.starcher@cru.org
    jobs:
      - 'rails-template'

- project:
    name: oauth_server
    description-intro: Builds, tests, & deploys the oauth_server docker image.
    email-recipients: josh.starcher@cru.org
    jobs:
      - 'rails-template'

- project:
    name: pr
    description-intro: Builds, tests, & deploys the Panorama docker image.
    email-recipients: josh.starcher@cru.org, justin.sabelko@cru.org
    jobs:
      - 'rails-template'

- project:
    name: rails-cas-auth-api
    description-intro: Builds, tests, & deploys the Rails CAS Authenticated API docker image.
    email-recipients: brian.zoetewey@ccci.org, josh.starcher@cru.org
    jobs:
      - 'rails-template'

- project:
    name: rails-infrastructure-canary
    description-intro: Builds a simplistic rails app, which only serves to prove out the ci & deployment infrastructure.
    cluster: lab
    jobs:
      - 'rails-template'

- project:
    name: rideshare
    description-intro: Builds, tests, & deploys the rideshare docker image.
    jobs:
      - 'rails-template'

- project:
    name: staffportal_api
    description-intro: Builds, tests, & deploys the Staff Portal docker image.
    email-recipients: tataihono.nikora@cru.org, kewei.jiang@cru.org
    jobs:
      - 'rails-template'

- project:
    name: summer_missions
    description-intro: Builds, tests, & deploys the Summer Missions docker image.
    email-recipients: josh.starcher@cru.org, justin.sabelko@cru.org, mark.knutsen@cru.org
    jobs:
      - 'rails-template'

- project:
    name: voke_api
    description-intro: Builds, tests, & deploys the Voke API docker image.
    jobs:
      - 'rails-template'

- project:
    name: data_transfers
    description-intro: Builds, tests, & deploys the data_transfers docker image.
    email-recipients: josh.starcher@cru.org
    jobs:
      - 'rails-template'

- project:
    name: cortex_gateway
    description-intro: Builds, tests, & deploys the cortex_gateway docker image.
    email-recipients: josh.starcher@cru.org
    jobs:
      - 'rails-template'

- project:
    name: watchthinkchat
    description-intro: Builds, tests, & deploys the WatchThinkChat docker image.
    jobs:
      - 'rails-template'

- project:
    name: escomm
    description-intro: Builds, tests, & deploys the Personalized EveryStudent Series docker image
    email-recipients: asaph.yuan@cru.org, david.raffensperger@cru.org
    jobs:
      - 'rails-template'


- project:
    name: voke_admin
    description-intro: Builds, tests, & deploys the Voke admin docker image.
    jobs:
      - 'react-template'

- project:
    name: ararat
    description-intro: Builds, tests, & deploys the Ararat docker image.
    email-recipients: josh.starcher@cru.org, sheldon@ballistiq.com
    jobs:
      - 'rails-template'

- project:
    name: redirector
    description-intro: Builds, tests, & deploys the redirector docker image.
    email-recipients: josh.starcher@cru.org
    jobs:
      - 'openresty-template'


- project:
    name: voke-dashboards
    description-intro: Builds, tests, & deploys the Voke Dashboards API docker image.
    email-recipients: josh.starcher@cru.org
    jobs:
      - 'rails-template'


- project:
    name: jesus-film-android
    description-intro: Builds, tests, & deploys the Jesus Film Android App.
    email-recipients: michael.harrison@cru.org
    authorized-developers:
      - michaelharro
      - frett
      - bleppard
    crashlytics-group-default: jesus-film-android-alpha
    jobs:
      - 'mobile-group-template'

- project:
    name: jesus-film-ios
    description-intro: Builds, tests, & deploys the Jesus Film iOS App.
    email-recipients: michael.harrison@cru.org
    authorized-developers:
      - michaelharro
      - charliepixegon
      - mresimont
    crashlytics-group-default: jesus-film-ios-alpha
    jobs:
      - 'mobile-group-template'


- job-group:
    name: 'php-template'
    jobs:
        - '{name}':
            build-script: php_deploy.sh

- job-group:
    name: 'openresty-template'
    jobs:
        - '{name}':
            build-script: openresty_deploy.sh

- job-group:
    name: 'rails-template'
    jobs:
        - '{name}':
            build-script: rails_deploy.sh

- job-group:
    name: 'react-template'
    jobs:
        - '{name}':
            build-script: react_deploy.sh

- publisher:
    name: 'publish-mobile-screenshots'
    publishers:
      - html-publisher:
          name: "Screen Shots"
          dir: "fastlane/output/screenshots"
          files: "screenshots.html"
          keep-all: true
          allow-missing: true
          link-to-last-build: false

- publisher:
    name: 'publish-mobile-html-unit-test-results'
    publishers:
      - html-publisher:
          name: "Unit Test Results"
          dir: "fastlane/output/unit_test_reports"
          files: "report.html"
          keep-all: true
          allow-missing: true
          link-to-last-build: false

- publisher:
    name: 'publish-mobile-html-code-coverage-results'
    publishers:
      - html-publisher:
          name: "Code Coverage Results"
          dir: "fastlane/output/code_coverage_reports"
          files: "index.html"
          keep-all: true
          allow-missing: true
          link-to-last-build: false

- publisher:
    name: 'publish-mobile-junit-results'
    publishers:
      - junit:
          results: fastlane/report.xml
          keep-long-stdio: true
          health-scale-factor: 1.0
          allow-empty-results: true


- job-group:
    name: 'mobile-group-template'
    defaults:
      crashlytics-group-default: ''
    jobs:
        - '{name}-{build-type}':
            description-build-type-info: 'Runs when pull requests are created. It will run your tests and put the result on the PR.'
            build-type: 'tests'
            number-of-builds-to-keep: 1
            mobile-parameters:
              - git:
                  name: sha1
                  description: |
                    If specified, jenkins will use this git branch to build.
                    If not, jenkins will pick a branch (between 'master' and 'staging')
                    that seems most likely to be the one you want built.
                    This is usually either the branch that has commits in it that jenkins hasn't 'seen' yet,
                    or, if there are none of those, the most recently-built branch.
                  type: branch
                  branch-filter: '.*/merge'
                  sort: 'descending'
                  default: :origin/(master|staging)
            git-branch: '$GIT_BRANCH'
            git-branch-to-build: '$sha1'
            git-fetch-filter-refspec: '+refs/pull/*:refs/remotes/origin/pr/*'
            fastlane-lane: 'run_tests'
            fastlane-env: 'tests'
            triggers:
              - github-pull-request:
                  admin-list: '{obj:authorized-developers}'
                  white-list: '{obj:authorized-developers}'
                  white-list-target-branches: {git-branch}
                  github-hooks: true
                  status-context: 'Jenkins'
                  status-add-test-results: 'true'
                  triggered-status: 'Build has been triggered'
                  started-status: 'Build has begun'
                  success-status: 'Build success'
                  failure-status: 'Build failed'
                  error-status: 'Error during build'
            publishers:
              - 'publish-mobile-html-unit-test-results'
              - 'publish-mobile-html-code-coverage-results'
              - 'publish-mobile-junit-results'
              - email:
                  recipients: '{email-recipients}'
        - '{name}-{build-type}':
            description-build-type-info: 'Runs when pull requests are submitted to {git-branch} branch. If building and testing is successful the app will be deployed to crashlytics for beta testing.'
            build-type: 'beta'
            number-of-builds-to-keep: 5
            parameters:
              - string:
                  name: CRASHLYTICS_GROUP
                  default: {crashlytics-group-default}
                  description: Alias of Crashlytics group to receive beta build
            git-branch: 'develop'
            git-branch-to-build: '$GIT_ORIGIN_BRANCH'
            git-fetch-filter-refspec: '+refs/heads/develop:refs/remotes/origin/develop'
            fastlane-lane: 'beta'
            fastlane-env: 'beta'
            triggers:
              - github
            publishers:
              - 'publish-mobile-html-unit-test-results'
              - 'publish-mobile-html-code-coverage-results'
              - 'publish-mobile-junit-results'
              - email:
                  recipients: '{email-recipients}'
        - '{name}-{build-type}':
            description-build-type-info: 'Runs when pull requests are submitted to {git-branch} branch. If building and testing is successful the app will be deployed to crashlytics for beta testing.'
            build-type: 'production'
            number-of-builds-to-keep: -1
            mobile-parameters:
            git-branch: 'master'
            git-branch-to-build: '$GIT_ORIGIN_BRANCH'
            git-fetch-filter-refspec: '+refs/heads/master:refs/remotes/origin/master'
            fastlane-lane: 'production'
            fastlane-env: 'production'
            triggers:
              - github
            publishers:
              - 'publish-mobile-screenshots'
              - 'publish-mobile-html-unit-test-results'
              - 'publish-mobile-html-code-coverage-results'
              - 'publish-mobile-junit-results'
              - email:
                  recipients: '{email-recipients}'



- job-template:
    name: '{name}-{build-type}'
    node: mac
    logrotate:
      numToKeep: '{number-of-builds-to-keep}'
    description: |
      {description-intro}

      {description-build-type-info}
    properties:
      - github:
          url: https://github.com/CruGlobal/{name}/
      - inject:
          properties-content: |
            #ANDROID
            ANDROID_SDK_PATH=/Volumes/External\ HD/android-sdk-macosx

            #PATH
            PATH=$PATH:/Users/Shared/Jenkins/.rbenv/shims:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/Volumes/External\ HD/android-sdk-macosx/tools:/Volumes/External\ HD/android-sdk-macosx/platform-tools

            #LANGUAGE SETTINGS (Fixes Ruby issue with Fastlane)
            LANG=en_US.UTF-8
            LANGUAGE=en_US.UTF-8
            LC_ALL=en_US.UTF-8

            GIT_BRANCH={git-branch}
            GIT_ORIGIN_BRANCH=origin/$GIT_BRANCH
    scm:
      - git:
          branches:
            - {git-branch-to-build}
          url: git@github.com:CruGlobal/{name}.git
          credentials-id: '66c3b5a3-0f7c-4e22-97b2-a78fb5a73658'
          refspec: {git-fetch-filter-refspec}
          wipe-workspace: false
          skip-tag: true
          prune: true
          excluded-users:
            - cru-jenkins-mobile
            - cru-jenkins2
            - cru-jenkins
    wrappers:
      - build-name:
          name: '$GIT_ORIGIN_BRANCH #$BUILD_NUMBER'
      - ssh-agent-credentials:
          users:
            - '66c3b5a3-0f7c-4e22-97b2-a78fb5a73658'
      - ansicolor:
          colormap: xterm
    builders:
      - shell: |
          #!/usr/bin/env bash
          set +x
          diffContent=$(git diff $GIT_ORIGIN_BRANCH^ $GIT_ORIGIN_BRANCH)
          diffSearchString="fastlane[^/metadata]\|FASTLANE_USER\|FASTLANE_PASSWORD\|FASTLANE_DONT_STORE_PASSWORD\|FASTLANE_TEAM_ID\|CODE_SIGNING_IDENTITY\|CERT_PASSWORD\|KEYCHAIN_NAME|\KEYCHAIN_PASSWORD\|DELIVER_PASSWORD\|DELIVER_USER"
          RED_COLOR='\033[0;31m'
          NO_COLOR='\033[0m'
          echo "$diffContent" | grep -q $diffSearchString
          set -x
          if [ $? -eq 0 ]; then
            echo -e "$RED_COLOR" "Unfortunately you do not have permission to change build scripts. Contact your system admin if you think you should be able to run this build." "$NO_COLOR"
            exit 1
          else
            exit 0
          fi
      - shell: |
          bundle install
          bundle exec fastlane {fastlane-lane} --env {fastlane-env}



- job-template:
    name: '{name}'
    description: |
      {description-intro}

      Builds on the 'staging' branch automatically trigger a deployment
      of that image to the staging environment.

      From 7am to 1pm on weekdays, builds on the 'master' branch automatically trigger a
      deployment of that image to the production environment.

      Only the master and staging branches are automatically built.
      Other branches may be manually built via `Build with Parameters`.

      Historic builds can be manually deployed to either staging or production,
      by running the 'Deploy to Production' or the 'Deploy to Staging' build promotions.

    parameters:
      - git:
          name: BRANCH_SPECIFIER
          description: |
            If specified, jenkins will use this git branch to build.
            If not, jenkins will pick a branch (between 'master' and 'staging')
            that seems most likely to be the one you want built.
            This is usually either the branch that has commits in it that jenkins hasn't 'seen' yet,
            or, if there are none of those, the most recently-built branch.
          type: branch
          sort: none
          default: :origin/(master|staging)

    properties:
      - github:
          url: https://github.com/CruGlobal/{name}/
      - promoted-build:
            names:
              - Deploy to Staging
              - Deploy to Production
      - inject:
          properties-content: |
            LD_LIBRARY_PATH=/opt/oracle/instantclient_11_2
    scm:
      - git:
          branches:
          - $BRANCH_SPECIFIER
          url: git@github.com:CruGlobal/{name}.git
          wipe-workspace: false
          skip-tag: true
          prune: true
    triggers:
      - github

    builders:
      - shell: 'PROJECT_NAME=$JOB_NAME DEPLOY_ECS=false ~/bin/{build-script}'

    publishers:
      - conditional-publisher:
          - condition-kind: strings-match
            condition-string1: "$GIT_BRANCH"
            condition-string2: "origin/staging"
            action:
              - trigger-parameterized-builds:
                  - project: deploy-ecs
                    predefined-parameters: |
                      IMAGE_TAG=$GIT_COMMIT-$BUILD_NUMBER
                      PROJECT_NAME=$JOB_NAME
                      GIT_COMMIT=$GIT_COMMIT
                      GIT_BRANCH=$GIT_BRANCH
                      ENVIRONMENT=staging
                      CLUSTER={cluster}
                    condition: SUCCESS
          - condition-kind: and
            condition-operands:
              - &is-master
                condition-kind: strings-match
                condition-string1: "$GIT_BRANCH"
                condition-string2: "origin/master"
              - &is-weekday
                condition-kind: day-of-week
                day-selector: weekday
              - &is-within-work-hours
                condition-kind: time
                earliest-hour: "7"
                earliest-min: "0"
                latest-hour: "13"
                latest-min: "0"
            action:
              - trigger-parameterized-builds:
                  - project: deploy-ecs
                    predefined-parameters: |
                      IMAGE_TAG=$GIT_COMMIT-$BUILD_NUMBER
                      PROJECT_NAME=$JOB_NAME
                      GIT_COMMIT=$GIT_COMMIT
                      GIT_BRANCH=$GIT_BRANCH
                      ENVIRONMENT=production
                      CLUSTER={cluster}
                    condition: SUCCESS
          - condition-kind: and
            condition-operands:
              - <<: *is-master
              - condition-kind: not
                condition-operand:
                  condition-kind: and
                  condition-operands:
                    - <<: *is-weekday
                    - <<: *is-within-work-hours
            action:
              - email-ext:
                  recipients: '{email-recipients}'
                  failure: false
                  success: true
                  send-to:
                    -  recipients
                    -  requester
                    -  developers
                  body: |
                    Note: $JOB_NAME #$BUILD_NUMBER was built, but was not automatically deployed to production since it is now after-hours.
                    To manually deploy, run the 'Deploy to Production' promotion here:
                    ${{BUILD_URL}}promotion/

                    $DEFAULT_CONTENT
                  presend-script: $DEFAULT_PRESEND_SCRIPT

    wrappers:
      - build-name:
          name: '$GIT_BRANCH #$BUILD_NUMBER'
